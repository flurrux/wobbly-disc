var _fpTsLibFunction = require('fp-ts/lib/function');
var _libCanvasUtil = require('../lib/canvas-util');
var _libCtxUtil = require('../lib/ctx-util');
var _libVec = require('../lib/vec3');
var _cameraOrbitCamera = require('./camera/orbit-camera');
var _spaceConversion = require('./space-conversion');
function setupOrbitCameraControl(canvas, transformCamera) {
  canvas.addEventListener("mousemove", e => {
    if (e.buttons !== 1) return;
    const s = 0.01;
    transformCamera(cam => ({
      ...cam,
      longitude: cam.longitude + e.movementX * s,
      latitude: cam.latitude + e.movementY * s
    }));
  });
  canvas.addEventListener("wheel", e => {
    transformCamera(cam => ({
      ...cam,
      radius: cam.radius * (1 + e.deltaY * 0.001)
    }));
  });
}
function createGridPoints(size) {
  let points = [];
  for (let x = 0; x < size[0]; x++) {
    for (let y = 0; y < size[1]; y++) {
      points.push([x, y]);
    }
  }
  return points;
}
const floorCellCounts = [5, 5];
const floorGridPoints = createGridPoints(floorCellCounts).map(point => _libVec.multiply([point[0] - floorCellCounts[0] / 2, 0, point[1]], 1));
const floorGridLines = (function () {
  let lines = [];
  // for (let x = 0; x < floorCellCounts[0] - 1; x++){
  // const baseIndex = x * floorCellCounts[1];
  // for (let y = 0; y < floorCellCounts[1] - 1; y++){
  // lines.push([baseIndex + y, baseIndex + y + 1]);
  // }
  // }
  for (let y = 0; y < floorCellCounts[1] - 1; y++) {
    for (let x = 0; x < floorCellCounts[0] - 1; x++) {
      const baseIndex = x * floorCellCounts[1];
      lines.push([baseIndex + y, baseIndex + y + 1]);
    }
  }
  return lines;
})();
function renderFloorGrid(ctx, worldToScreen) {
  const screenGridPoints = floorGridPoints.map(worldToScreen);
  ctx.strokeStyle = "black";
  ctx.lineWidth = 4;
  for (const line of floorGridLines) {
    _libCtxUtil.pathPolyline(ctx, [screenGridPoints[line[0]], screenGridPoints[line[1]]]);
    ctx.stroke();
  }
}
function renderScene(ctx, cam) {
  const worldToCam = _spaceConversion.worldPointToCamPoint(cam);
  const camToScreen = _spaceConversion.camPointToScreenPoint(ctx, cam);
  const worldToScreen = _fpTsLibFunction.flow(worldToCam, camToScreen);
  renderFloorGrid(ctx, worldToScreen);
}
const canvas = _libCanvasUtil.setupCanvas();
const ctx = canvas.getContext("2d");
const backgroundColor = "#d4d3d2";
let camera = {
  radius: 10,
  latitude: 0,
  longitude: 0,
  orthoSize: [canvas.width, canvas.height]
};
const updateCamera = () => {
  camera = {
    ...camera,
    orthoSize: [canvas.width / 2, canvas.height / 2]
  };
};
const transformCamera = transformation => {
  camera = transformation(camera);
  render();
};
const render = () => {
  const {canvas} = ctx;
  const [w, h] = [canvas.width, canvas.height];
  ctx.save();
  ctx.fillStyle = backgroundColor;
  ctx.fillRect(0, 0, w, h);
  ctx.translate(w / 2, h / 2);
  ctx.scale(window.devicePixelRatio, -window.devicePixelRatio);
  const perspectiveCam = {
    ..._cameraOrbitCamera.toRegularCamera(camera),
    settings: {
      planeWidthHalf: canvas.width,
      planeHeightHalf: canvas.height,
      zScale: 2000
    }
  };
  Object.assign(ctx, {
    strokeStyle: "#3b3a39",
    lineWidth: 2,
    lineJoin: "round"
  });
  renderScene(ctx, perspectiveCam);
  ctx.restore();
};
updateCamera();
setupOrbitCameraControl(canvas, transformCamera);
render();
